@page "/admin/categories"
@using System.Net
@using BlazorUI.Components.Shared
@using Core.Models

@implements IDisposable
@code
{
    [Inject] InMemoryDatabaseCache DBCache { get; set; }
    protected override async Task OnInitializedAsync()
    {
        DBCache.OnCategoriesDataChanged += StateHasChanged;

        if (DBCache.Categories == null)
        {
            await DBCache.GetCategoriesAndCache();
        }
    }

    public void Dispose() => DBCache.OnCategoriesDataChanged -= StateHasChanged;

    [Inject] HttpClient HttpClient { get; set; }
    private bool _attemptingToDeleteACategory = false;
    private bool _successfullyDeletedACategory = false;
    private bool _unsuccessfullyTriedToDeleteACategory = false;
    private string _reasonUnsuccessfullyTriedToDeleteACategory = null;


    private async void DeleteCategory(Category categoryToDelete)
    {
        //This should be handled by EF (cascade) and the API ?
        if (categoryToDelete.Posts != null && categoryToDelete.Posts.Count != 0)
        {
            string postTitlesThatMustBeDeletedFirst = string.Empty;

            for (int i = 0; i < categoryToDelete.Posts.Count; i++)
            {
                if (i == categoryToDelete.Posts.Count - 1)
                {
                    // Last iteration
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Posts[i].Title}\"";
                }
                else if (i == categoryToDelete.Posts.Count - 2)
                {
                    // Second last iteration
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Posts[i].Title}\" and ";
                }
                else
                {
                    // Other iterations
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Posts[i].Title}\", ";
                }
            }

            _reasonUnsuccessfullyTriedToDeleteACategory = $"The category still has posts in it. Please delete the posts titled {postTitlesThatMustBeDeletedFirst} first.";
            _unsuccessfullyTriedToDeleteACategory = true;
        }
        else
        {
            _attemptingToDeleteACategory = true;

            HttpResponseMessage response = await HttpClient.DeleteAsync($"{APIEndpoints.s_categories}/{categoryToDelete.CategoryId}");

            if (response.StatusCode == HttpStatusCode.NoContent)
            {
                if (DBCache.Categories.Remove(categoryToDelete))
                {
                    _successfullyDeletedACategory = true;
                }
                else
                {
                    _reasonUnsuccessfullyTriedToDeleteACategory = "An unexpected error has occurred. Please try again and if the issue persists contact the administrator.";
                    _unsuccessfullyTriedToDeleteACategory = true;
                }
            }
            else
            {
                _reasonUnsuccessfullyTriedToDeleteACategory = $"The API didn't return an HttpStatusCode.NoContent status code. Instead the API returned the status code {response.StatusCode} and gave the following reason for failure: {response.ReasonPhrase}.";
                _unsuccessfullyTriedToDeleteACategory = true;
            }
        }

        _attemptingToDeleteACategory = false;
        StateHasChanged();
    }
}

<AuthorizeView Roles="Administrator">
    <Authorized Context="Auth">


        <main class="admin-area-main">

            <BlazorUI.Components.Admin.Sidebar />


            <div class="admin-area-content container-fluid bg-white">
                <div class="row g-0">
                    <div class="col">
                        <h1>Categories</h1>

                        <hr />
                        <br />

                        @if (DBCache.Categories == null || _attemptingToDeleteACategory)
                        {
                            <BlazorUI.Components.Shared.LoadingSpinner />
                        }
                        else
                        {
                            <a href="/admin/categories/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                                <i class="fas fa-plus"></i> Create category
                            </a>

                            <button @onclick="() => DBCache.GetCategoriesAndCache()" class="btn btn-primary shadow md-f-size-1-5">
                                <i class="fas fa-sync"></i> Refresh data
                            </button>

                            <br />
                            <br />
                            <br />

                            @if (DBCache.Categories.Count < 1)
                            {
                                <h1>No categories found. Please create one.</h1>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered table-sm">
                                        <thead>
                                            <tr>
                                                <th scope="col">Name</th>
                                                <th scope="col">Thumbnail</th>
                                                <th scope="col">Description</th>
                                                <th scope="col">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var category in DBCache.Categories)
                                            {
                                                <tr>
                                                    <th class="w-15" scope="row">
                                                        <p>@category.Name</p>
                                                    </th>
                                                    <td class="w-35">
                                                        <img src="@($"{APIEndpoints.ServerBaseUrl}/{category.ThumbnailPath}")" class="admin-index-thumbnail-image" alt="Category thumbnail image" />
                                                    </td>
                                                    <td class="w-15">
                                                        <p>@category.Description</p>
                                                    </td>
                                                    <td class="w-35">
                                                        <div class="d-flex flex-column">
                                                            <a href="/admin/categories/update/@category.CategoryId" class="btn btn-update shadow md-f-size-1-5 mb-4">
                                                                <i class="fas fa-edit"></i> Update
                                                            </a>
                                                            <button @onclick="(() => DeleteCategory(category))" class="btn btn-danger shadow md-f-size-1-5">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                        <div class="position-fixed bottom-0 end-5 z-index-5">

                            @if (_successfullyDeletedACategory == true)
                            {
                                <Toast IsError="false" ToastTitle="Successfully deleted a category."
                                   ToastBody="The category has been removed from the database."
                                   ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedACategory = false" />
                            }

                            @if (_unsuccessfullyTriedToDeleteACategory == true)
                            {
                                <Toast IsError="true" ToastTitle="Delete failed."
                                   ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeleteACategory}\" Please try again and if the issue persists contact the administrator.")"
                                   ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToDeleteACategory = false" />
                            }

                        </div>
                    </div>
                </div>
            </div>
        </main>
    </Authorized>
    <NotAuthorized>
        <BlazorUI.Components.Admin.SignIn />
    </NotAuthorized>
</AuthorizeView>