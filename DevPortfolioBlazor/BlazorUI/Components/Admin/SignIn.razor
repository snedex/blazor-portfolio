@using BlazorUI.Components.Shared
@using Blazored.LocalStorage
@using Core.ViewModel
@using System.Net.Http.Headers

<div class="d-flex w-100 min-vh-90 justify-content-center align-items-center">
	<div class="row">
		<div class="col shadow-no-hover p-5">
			@if (_signInSuccess == true)
			{
				<h3 class="text-center my-3">Sign in successful. Redirecting...</h3>
			}
			else
			{
				<h3 class="text-center fw-bold">You must be signed in to access the admin area.</h3>
				
				<EditForm Model="_user" OnValidSubmit="SignInToApp">
					<DataAnnotationsValidator />

					<div class="form-group my-3">
						<label for="email">Email address</label>
						<InputText @bind-Value="_user.EmailAddress" id="email" class="form-control" />
						<ValidationMessage For="@(() => _user.EmailAddress)" />
					</div>

					<div class="form-group my-3">
						<label for="password">Password</label>
						<InputText @bind-Value="_user.Password" id="password" type="password" class="form-control" />
						<ValidationMessage For="@(() => _user.Password)" />
					</div>

					<ValidationSummary />

					<button type="submit" class="btn btn-primary shadow w-100 md-f-size-1-5">
						Sign in
					</button>
				</EditForm>
			}
		</div>
	</div>
</div>

<div class="position-fized bottom-0 end-5 z-index-5">

	@if (_signInSuccess == true)
	{
		<Toast IsError="false" ToastTitle="Sign in successful"
		   ToastBody="You should be redirected automatically within a few seconds."
		   ParentMethodToCallOnClickBtnClose="() => _signInSuccess = false" />
	}

	@if (_signInFailed == true)
	{
		<Toast IsError="true" ToastTitle="Sign in attempt failed"
		   ToastBody="Please try again and if the issue persists contact the administrator."
		   ParentMethodToCallOnClickBtnClose="() => _signInFailed = false" />
	}

</div>

@code {
    [Inject] HttpClient httpClient { get; set; }
    [Inject] ILocalStorageService localStorage { get; set; }
    [Inject] AppAuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject] NavigationManager NavManager { get; set; }

    private bool _signInFailed = false;
    private bool _signInSuccess = false;

    private UserViewModel _user = new();

    private async Task SignInToApp()
    {
        var response = await httpClient.PostAsJsonAsync<UserViewModel>(APIEndpoints.s_signIn, _user);

        _signInFailed = !response.IsSuccessStatusCode;
        _signInSuccess = response.IsSuccessStatusCode;

        if (_signInSuccess)
        {
            var token = await response.Content.ReadAsStringAsync();

            await localStorage.SetItemAsync("bearerToken", token);

			await ((AppAuthenticationStateProvider)AuthStateProvider).SignIn();

            httpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("bearer", token);

            NavManager.NavigateTo("/admin", true);
        }
    }
}
