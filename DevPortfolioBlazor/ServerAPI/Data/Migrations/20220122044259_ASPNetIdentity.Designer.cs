// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerAPI.Data;

#nullable disable

namespace ServerAPI.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220122044259_ASPNetIdentity")]
    partial class ASPNetIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "This is a description of category 1",
                            Name = "Category 1",
                            ThumbnailPath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "This is a description of category 2",
                            Name = "Category 2",
                            ThumbnailPath = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "This is a description of category 3",
                            Name = "Category 3",
                            ThumbnailPath = "uploads/placeholder.jpg"
                        });
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("TEXT");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PublishDate")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            Author = "Will",
                            CategoryId = 2,
                            Content = "",
                            Excerpt = "This is the excerpt for post 1. An excerpt is a little extraction from a larger piece of text. Sort of like a preview.",
                            PublishDate = "2022-01-22 04:42",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "First post"
                        },
                        new
                        {
                            PostId = 2,
                            Author = "Will",
                            CategoryId = 3,
                            Content = "",
                            Excerpt = "This is the excerpt for post 2. An excerpt is a little extraction from a larger piece of text. Sort of like a preview.",
                            PublishDate = "2022-01-22 04:42",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Second post"
                        },
                        new
                        {
                            PostId = 3,
                            Author = "Will",
                            CategoryId = 1,
                            Content = "",
                            Excerpt = "This is the excerpt for post 3. An excerpt is a little extraction from a larger piece of text. Sort of like a preview.",
                            PublishDate = "2022-01-22 04:42",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Third post"
                        },
                        new
                        {
                            PostId = 4,
                            Author = "Will",
                            CategoryId = 2,
                            Content = "",
                            Excerpt = "This is the excerpt for post 4. An excerpt is a little extraction from a larger piece of text. Sort of like a preview.",
                            PublishDate = "2022-01-22 04:42",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Fourth post"
                        },
                        new
                        {
                            PostId = 5,
                            Author = "Will",
                            CategoryId = 3,
                            Content = "",
                            Excerpt = "This is the excerpt for post 5. An excerpt is a little extraction from a larger piece of text. Sort of like a preview.",
                            PublishDate = "2022-01-22 04:42",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Fifth post"
                        },
                        new
                        {
                            PostId = 6,
                            Author = "Will",
                            CategoryId = 1,
                            Content = "",
                            Excerpt = "This is the excerpt for post 6. An excerpt is a little extraction from a larger piece of text. Sort of like a preview.",
                            PublishDate = "2022-01-22 04:42",
                            Published = true,
                            ThumbnailImagePath = "uploads/placeholder.jpg",
                            Title = "Sixth post"
                        });
                });

            modelBuilder.Entity("Core.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Description = "This site! This one you are viewing right now. Bit of recursion for you. This demonstrates experiments in blazor with a Web API backend with EF core.",
                            ImagePath = "assets/img/project_blazor.png",
                            Name = "Blazor Portfolio"
                        },
                        new
                        {
                            ProjectId = 2,
                            Description = "This is my main static landing site. Built to be simple and lightweight whilst also being responsive.",
                            ImagePath = "assets/img/project_main_site.png",
                            Name = "Main sneddon.dev Site"
                        });
                });

            modelBuilder.Entity("Core.Models.ProjectDetail", b =>
                {
                    b.Property<int>("ProjectDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DemoLocation")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceLocation")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectDetailId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectDetails");

                    b.HasData(
                        new
                        {
                            ProjectDetailId = 1,
                            Content = "",
                            DemoLocation = "https://blazor.sneddon.dev/",
                            ProjectId = 1,
                            SourceLocation = "https://github.com/snedex/blazor-portfolio"
                        },
                        new
                        {
                            ProjectDetailId = 2,
                            Content = "",
                            DemoLocation = "https://www.sneddon.dev/",
                            ProjectId = 2,
                            SourceLocation = "https://github.com/snedex/snedex.github.io"
                        });
                });

            modelBuilder.Entity("Core.Models.ProjectImage", b =>
                {
                    b.Property<int>("ProjectImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectDetailId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectImageId");

                    b.HasIndex("ProjectDetailId");

                    b.ToTable("ProjectImages");

                    b.HasData(
                        new
                        {
                            ProjectImageId = 1,
                            ImagePath = "assets/img/project/blazor_1.png",
                            ProjectDetailId = 1
                        },
                        new
                        {
                            ProjectImageId = 2,
                            ImagePath = "assets/img/project/blazor_2.png",
                            ProjectDetailId = 1
                        },
                        new
                        {
                            ProjectImageId = 3,
                            ImagePath = "assets/img/project/static_1.png",
                            ProjectDetailId = 2
                        },
                        new
                        {
                            ProjectImageId = 4,
                            ImagePath = "assets/img/project/static_2.png",
                            ProjectDetailId = 2
                        },
                        new
                        {
                            ProjectImageId = 5,
                            ImagePath = "assets/img/project/static_3.png",
                            ProjectDetailId = 2
                        });
                });

            modelBuilder.Entity("Core.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = -1,
                            Description = "C# is my primary programming language. I've been using this language since 2009 to build Windows Services, WPF Applications, Web applications (WebForms, MVC, WebAPI, SOAP Services), and Console utilities for the companies I have worked for. I find C# to be extremely flexible with excellent tooling and support built around it.",
                            DisplayOrder = 1,
                            ImagePath = "assets/img/CSharp.png",
                            Title = "C# Development"
                        },
                        new
                        {
                            SkillId = -2,
                            Description = "I am familiar with some of the more popular web technologies, HTML 5, Bootstrap, Javascript/jQuery, along with some less well known items like pico.css. I hope to expand into Angular, React, and Vue as time allows.",
                            DisplayOrder = 2,
                            ImagePath = "assets/img/CoreWebTech.png",
                            Title = "Core Web Technologies"
                        },
                        new
                        {
                            SkillId = -3,
                            Description = "As part of honing my skills, this site is an experiment and learning experience building web applications with Blazor and WebASM technologies. This gives me a chance to try out new things and build more progressive web applications with better UX.",
                            DisplayOrder = 3,
                            ImagePath = "assets/img/ASPNetBlazor.png",
                            Title = "Blazor"
                        },
                        new
                        {
                            SkillId = -4,
                            Description = "Over my career I have spend a significant time writing SQL. This varied from stored procedures for application logic, maintenance, diagnostics, and even CLR extended functions to enhance functionality. I'm no stranger to EF code or database first either! ",
                            DisplayOrder = 4,
                            ImagePath = "assets/img/SQLDatabase.png",
                            Title = "Database Development"
                        },
                        new
                        {
                            SkillId = -5,
                            Description = "I have some experience with maintaining server infrastructure both on premises and in the cloud. I've also started to learn Azure deployment with CI/CD with this project utilising Github actions to automate the deployment process. ",
                            DisplayOrder = 5,
                            ImagePath = "assets/img/Azure.png",
                            Title = "Devops"
                        },
                        new
                        {
                            SkillId = -6,
                            Description = "I've been teaching myself the Python language using the Django framework as part of a hobby project. Learning new skills and languages is both a fun challenge and important to my continual impovement for my career; plus it allows me to pivot when needed.",
                            DisplayOrder = 6,
                            ImagePath = "assets/img/python.svg",
                            Title = "Python + Django"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.Post", b =>
                {
                    b.HasOne("Core.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Models.ProjectDetail", b =>
                {
                    b.HasOne("Core.Models.Project", "Project")
                        .WithOne("Detail")
                        .HasForeignKey("Core.Models.ProjectDetail", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Models.ProjectImage", b =>
                {
                    b.HasOne("Core.Models.ProjectDetail", "ProjectDetail")
                        .WithMany("Images")
                        .HasForeignKey("ProjectDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Core.Models.Project", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.ProjectDetail", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
